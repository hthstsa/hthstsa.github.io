{"id":"node_modules/react-visibility-sensor/visibility-sensor.js","dependencies":[{"name":"/home/kusti8/Documents/Github/webmaster2019/package.json","includedInParent":true,"mtime":1553113739742},{"name":"/home/kusti8/Documents/Github/webmaster2019/.babelrc","includedInParent":true,"mtime":1553111962055},{"name":"/home/kusti8/Documents/Github/webmaster2019/node_modules/react-visibility-sensor/package.json","includedInParent":true,"mtime":1553111896248},{"name":"react","loc":{"line":3,"column":20},"parent":"/home/kusti8/Documents/Github/webmaster2019/node_modules/react-visibility-sensor/visibility-sensor.js","resolved":"/home/kusti8/Documents/Github/webmaster2019/node_modules/react/index.js"},{"name":"react-dom","loc":{"line":4,"column":23},"parent":"/home/kusti8/Documents/Github/webmaster2019/node_modules/react-visibility-sensor/visibility-sensor.js","resolved":"/home/kusti8/Documents/Github/webmaster2019/node_modules/react-dom/index.js"},{"name":"prop-types","loc":{"line":5,"column":24},"parent":"/home/kusti8/Documents/Github/webmaster2019/node_modules/react-visibility-sensor/visibility-sensor.js","resolved":"/home/kusti8/Documents/Github/webmaster2019/node_modules/prop-types/index.js"},{"name":"create-react-class","loc":{"line":6,"column":31},"parent":"/home/kusti8/Documents/Github/webmaster2019/node_modules/react-visibility-sensor/visibility-sensor.js","resolved":"/home/kusti8/Documents/Github/webmaster2019/node_modules/create-react-class/index.js"},{"name":"./lib/is-visible-with-offset","loc":{"line":7,"column":34},"parent":"/home/kusti8/Documents/Github/webmaster2019/node_modules/react-visibility-sensor/visibility-sensor.js","resolved":"/home/kusti8/Documents/Github/webmaster2019/node_modules/react-visibility-sensor/lib/is-visible-with-offset.js"}],"generated":{"js":"'use strict';\n\nvar React = require('react');\nvar ReactDOM = require('react-dom');\nvar PropTypes = require('prop-types');\nvar createReactClass = require('create-react-class');\nvar isVisibleWithOffset = require('./lib/is-visible-with-offset')\n\nfunction normalizeRect (rect) {\n  if (rect.width === undefined) {\n    rect.width = rect.right - rect.left;\n  }\n\n  if (rect.height === undefined) {\n    rect.height = rect.bottom - rect.top;\n  }\n\n  return rect;\n}\n\nmodule.exports = createReactClass({\n  displayName: 'VisibilitySensor',\n\n  propTypes: {\n    onChange: PropTypes.func,\n    active: PropTypes.bool,\n    partialVisibility: PropTypes.oneOfType([\n      PropTypes.bool,\n      PropTypes.oneOf(['top', 'right', 'bottom', 'left']),\n    ]),\n    delayedCall: PropTypes.bool,\n    offset: PropTypes.oneOfType([\n      PropTypes.shape({\n        top: PropTypes.number,\n        left: PropTypes.number,\n        bottom: PropTypes.number,\n        right: PropTypes.number\n      }),\n      // deprecated offset property\n      PropTypes.shape({\n        direction: PropTypes.oneOf(['top', 'right', 'bottom', 'left']),\n        value: PropTypes.number\n      })\n    ]),\n    scrollCheck: PropTypes.bool,\n    scrollDelay: PropTypes.number,\n    scrollThrottle: PropTypes.number,\n    resizeCheck: PropTypes.bool,\n    resizeDelay: PropTypes.number,\n    resizeThrottle: PropTypes.number,\n    intervalCheck: PropTypes.bool,\n    intervalDelay: PropTypes.number,\n    containment: typeof window !== 'undefined' ? PropTypes.instanceOf(window.Element) : PropTypes.any,\n    children: PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.func,\n    ]),\n    minTopValue: PropTypes.number,\n  },\n\n  getDefaultProps: function () {\n    return {\n      active: true,\n      partialVisibility: false,\n      minTopValue: 0,\n      scrollCheck: false,\n      scrollDelay: 250,\n      scrollThrottle: -1,\n      resizeCheck: false,\n      resizeDelay: 250,\n      resizeThrottle: -1,\n      intervalCheck: true,\n      intervalDelay: 100,\n      delayedCall: false,\n      offset: {},\n      containment: null,\n      children: React.createElement('span')\n    };\n  },\n\n  getInitialState: function () {\n    return {\n      isVisible: null,\n      visibilityRect: {}\n    };\n  },\n\n  componentDidMount: function () {\n    this.node = ReactDOM.findDOMNode(this);\n    if (this.props.active) {\n      this.startWatching();\n    }\n  },\n\n  componentWillUnmount: function () {\n    this.stopWatching();\n  },\n\n  componentDidUpdate: function(prevProps) {\n    // re-register node in componentDidUpdate if children diffs [#103]\n    this.node = ReactDOM.findDOMNode(this);\n\n    if (this.props.active && !prevProps.active) {\n      this.setState(this.getInitialState());\n      this.startWatching();\n    } else if (!this.props.active) {\n      this.stopWatching();\n    }\n  },\n\n  getContainer: function () {\n    return this.props.containment || window;\n  },\n\n  addEventListener: function (target, event, delay, throttle) {\n    if (!this.debounceCheck) {\n      this.debounceCheck = {};\n    }\n\n    var timeout;\n    var func;\n\n    var later = function () {\n      timeout = null;\n      this.check();\n    }.bind(this);\n\n    if (throttle > -1) {\n      func = function () {\n        if (!timeout) {\n          timeout = setTimeout(later, throttle || 0);\n        }\n      };\n    } else {\n      func = function () {\n        clearTimeout(timeout);\n        timeout = setTimeout(later, delay || 0);\n      };\n    }\n\n    var info = {\n      target: target,\n      fn: func,\n      getLastTimeout: function () {\n        return timeout;\n      },\n    };\n\n    target.addEventListener(event, info.fn);\n    this.debounceCheck[event] = info;\n  },\n\n  startWatching: function () {\n    if (this.debounceCheck || this.interval) { return; }\n\n    if (this.props.intervalCheck) {\n      this.interval = setInterval(this.check, this.props.intervalDelay);\n    }\n\n    if (this.props.scrollCheck) {\n      this.addEventListener(\n        this.getContainer(),\n        'scroll',\n        this.props.scrollDelay,\n        this.props.scrollThrottle\n      );\n    }\n\n    if (this.props.resizeCheck) {\n      this.addEventListener(\n        window,\n        'resize',\n        this.props.resizeDelay,\n        this.props.resizeThrottle\n      );\n    }\n\n    // if dont need delayed call, check on load ( before the first interval fires )\n    !this.props.delayedCall && this.check();\n  },\n\n  stopWatching: function () {\n    if (this.debounceCheck) {\n      // clean up event listeners and their debounce callers\n      for (var debounceEvent in this.debounceCheck) {\n        if (this.debounceCheck.hasOwnProperty(debounceEvent)) {\n          var debounceInfo = this.debounceCheck[debounceEvent];\n\n          clearTimeout(debounceInfo.getLastTimeout());\n          debounceInfo.target.removeEventListener(\n            debounceEvent, debounceInfo.fn\n          );\n\n          this.debounceCheck[debounceEvent] = null;\n        }\n      }\n    }\n    this.debounceCheck = null;\n\n    if (this.interval) { this.interval = clearInterval(this.interval); }\n  },\n\n  roundRectDown: function (rect) {\n    return {\n      top: Math.floor(rect.top),\n      left: Math.floor(rect.left),\n      bottom: Math.floor(rect.bottom),\n      right: Math.floor(rect.right),\n    };\n  },\n\n  /**\n   * Check if the element is within the visible viewport\n   */\n  check: function () {\n    var el = this.node;\n    var rect;\n    var containmentRect;\n    // if the component has rendered to null, dont update visibility\n    if (!el) {\n      return this.state;\n    }\n\n    rect = normalizeRect(this.roundRectDown(el.getBoundingClientRect()));\n\n    if (this.props.containment) {\n      var containmentDOMRect = this.props.containment.getBoundingClientRect();\n      containmentRect = {\n        top: containmentDOMRect.top,\n        left: containmentDOMRect.left,\n        bottom: containmentDOMRect.bottom,\n        right: containmentDOMRect.right,\n      }\n    } else {\n      containmentRect = {\n        top: 0,\n        left: 0,\n        bottom: window.innerHeight || document.documentElement.clientHeight,\n        right: window.innerWidth || document.documentElement.clientWidth\n      };\n    }\n\n    // Check if visibility is wanted via offset?\n    var offset = this.props.offset || {};\n    var hasValidOffset = typeof offset === 'object';\n    if (hasValidOffset) {\n      containmentRect.top += offset.top || 0;\n      containmentRect.left += offset.left || 0;\n      containmentRect.bottom -= offset.bottom || 0;\n      containmentRect.right -= offset.right || 0;\n    }\n\n    var visibilityRect = {\n      top: rect.top >= containmentRect.top,\n      left: rect.left >= containmentRect.left,\n      bottom: rect.bottom <= containmentRect.bottom,\n      right: rect.right <= containmentRect.right\n    };\n\n    var hasSize = rect.height > 0 && rect.width > 0;\n\n    var isVisible = (\n      hasSize &&\n      visibilityRect.top &&\n      visibilityRect.left &&\n      visibilityRect.bottom &&\n      visibilityRect.right\n    );\n\n    // check for partial visibility\n    if (hasSize && this.props.partialVisibility) {\n      var partialVisible =\n          rect.top <= containmentRect.bottom && rect.bottom >= containmentRect.top &&\n          rect.left <= containmentRect.right && rect.right >= containmentRect.left;\n\n      // account for partial visibility on a single edge\n      if (typeof this.props.partialVisibility === 'string') {\n        partialVisible = visibilityRect[this.props.partialVisibility]\n      }\n\n      // if we have minimum top visibility set by props, lets check, if it meets the passed value\n      // so if for instance element is at least 200px in viewport, then show it.\n      isVisible = this.props.minTopValue\n        ? partialVisible && rect.top <= (containmentRect.bottom - this.props.minTopValue)\n        : partialVisible\n    }\n\n    // Deprecated options for calculating offset.\n    if (typeof offset.direction === 'string' &&\n        typeof offset.value === 'number') {\n      console.warn('[notice] offset.direction and offset.value have been deprecated. They still work for now, but will be removed in next major version. Please upgrade to the new syntax: { %s: %d }', offset.direction, offset.value)\n\n      isVisible = isVisibleWithOffset(offset, rect, containmentRect);\n    }\n\n    var state = this.state;\n    // notify the parent when the value changes\n    if (this.state.isVisible !== isVisible) {\n      state = {\n        isVisible: isVisible,\n        visibilityRect: visibilityRect\n      };\n      this.setState(state);\n      if (this.props.onChange) this.props.onChange(isVisible, visibilityRect);\n    }\n\n    return state;\n  },\n\n  render: function () {\n    if (this.props.children instanceof Function) {\n      return this.props.children({\n        isVisible: this.state.isVisible,\n        visibilityRect: this.state.visibilityRect,\n      });\n    }\n    return React.Children.only(this.props.children);\n  }\n});\n"},"sourceMaps":null,"error":null,"hash":"c5dc92b9c069d67126554a6a804a8ecf","cacheData":{"env":{}}}